debug	macro
; При вызове: ax=преобразуемое число, si=адрес строки с результатом
; преобразования (одно 4-разрядное 16-ричное число)
	push	ax		; Сохраним
	push	bx		; используемые
	push	cx		; регистры
	push	dx
	push	ax		; Сохраним наше число в стеке
	and	ax,0f000h	; Выделим старшую четвёрку битов
	shr	ax,12		; Сдвинем в начало регистра
	mov	bx,offset tblhex; BX=адрес таблицы трансляции
	xlat			; Команда табличной трансляции
	mov	[si],al		; Отправим символ в строку
	pop	ax		; Вернём в AX исходное число
	push	ax		; И отправим его обратно в стек
	and	ax,00f00h	; Выделим вторую четвёрку битов
	shr	ax,8		; Сдвинем в начало регистра
	inc	si		; Инкремент в строке результата
	xlat			; Команда табличной трансляции
	mov	[si],al		; Отправим символ в строку
	pop	ax		; Вернём в AX исходное число
	push	ax		; И отправим его обратно в стек
	and	ax,000f0h	; Выделим третью четвёрку битов
	shr	ax,4		; Сдвинем в начало регистра
	inc	si		; Инкремент в строке результата
	xlat			; Команда табличной трансляции
	mov	[si],al		; Отправим символ в строку
	pop	ax		; Вернём в AX исходное число
	push	ax		; И отправим его обратно в стек
	and	ax,0000fh	; Выделим младшую четвёрку битов
	inc	si		; Инкремент в строке результата
	xlat			; Команда табличной трансляции
	mov	[si],al		; Отправим символ в строку
	pop	ax		; Восстановим стек
	pop	dx		; Восстановим
	pop	cx		; используемые
	pop	bx		; регистры
	pop	ax		;
endm
